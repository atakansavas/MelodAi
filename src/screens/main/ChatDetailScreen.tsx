import { Feather } from '@expo/vector-icons';
import React, { useEffect, useRef, useState } from 'react';
import {
  Alert,
  KeyboardAvoidingView,
  Modal,
  Platform,
  ScrollView,
  StyleSheet,
  Text,
  TextInput,
  TouchableOpacity,
  View,
} from 'react-native';

import { SpotifyApiService } from '@services/spotify';

import { SpotifyTrack } from '../../../types/spotify';
import { useRouter } from '../../hooks/useRouter';

interface Message {
  id: string;
  text: string;
  isUser: boolean;
  timestamp: Date;
  isLoading?: boolean;
}

interface ChatDetailScreenProps {
  params?: {
    trackId?: string;
    trackName?: string;
    artistName?: string;
  };
}

export default function ChatDetailScreen({ params }: ChatDetailScreenProps) {
  const router = useRouter();
  const scrollViewRef = useRef<ScrollView>(null);
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: 'Merhaba! MÃ¼zik hakkÄ±nda herhangi bir konuda sohbet edebiliriz. Hangi konuda yardÄ±mcÄ± olabilirim?',
      isUser: false,
      timestamp: new Date(),
    },
  ]);
  const [inputText, setInputText] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isModalVisible, setIsModalVisible] = useState(false);

  const trackName = params?.trackName || 'MÃ¼zik';
  const artistName = params?.artistName || '';

  // Check if there are any user messages
  const hasUserMessages = messages.some((message) => message.isUser);

  useEffect(() => {
    // Auto-scroll to bottom when new messages arrive
    setTimeout(() => {
      scrollViewRef.current?.scrollToEnd({ animated: true });
    }, 100);
  }, [messages]);

  const handleQuickAction = async (actionText: string) => {
    const userMessage: Message = {
      id: Date.now().toString(),
      text: actionText,
      isUser: true,
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, userMessage]);
    setIsLoading(true);

    // Add loading message
    const loadingMessage: Message = {
      id: (Date.now() + 1).toString(),
      text: 'AI dÃ¼ÅŸÃ¼nÃ¼yor...',
      isUser: false,
      timestamp: new Date(),
      isLoading: true,
    };

    setMessages((prev) => [...prev, loadingMessage]);

    try {
      // Simulate AI response (replace with actual API call)
      await new Promise((resolve) => setTimeout(resolve, 2000));

      const aiResponses = [
        'Bu ÅŸarkÄ± gerÃ§ekten harika! MÃ¼zik teorisi aÃ§Ä±sÄ±ndan bakarsak, bu parÃ§a Ã§ok gÃ¼zel bir melodi yapÄ±sÄ±na sahip.',
        'Bu sanatÃ§Ä±nÄ±n diÄŸer eserlerini de dinlemenizi Ã¶neririm. Benzer tarzda baÅŸka Ã¶nerilerim de var.',
        'MÃ¼zik tarihinde bu tÃ¼r eserlerin Ã¶nemli bir yeri var. Hangi dÃ¶nem hakkÄ±nda daha fazla bilgi almak istersiniz?',
        'Bu ÅŸarkÄ±nÄ±n sÃ¶zleri gerÃ§ekten derin anlamlar taÅŸÄ±yor. SanatÃ§Ä±nÄ±n hayatÄ±ndan izler bulabilirsiniz.',
        'MÃ¼zik prodÃ¼ksiyonu aÃ§Ä±sÄ±ndan bu parÃ§a Ã§ok baÅŸarÄ±lÄ±. Hangi teknik detaylar hakkÄ±nda konuÅŸmak istersiniz?',
        'Bu tÃ¼r mÃ¼zik dinlemek ruh halinizi nasÄ±l etkiliyor? MÃ¼ziÄŸin psikolojik etkileri hakkÄ±nda konuÅŸabiliriz.',
        'Bu sanatÃ§Ä±nÄ±n kariyer yolculuÄŸu gerÃ§ekten ilham verici. BaÅŸka hangi sanatÃ§Ä±larÄ± takip ediyorsunuz?',
        'MÃ¼zik tÃ¼rleri arasÄ±nda geÃ§iÅŸ yapmak her zaman ilginÃ§. Hangi tÃ¼rleri keÅŸfetmek istiyorsunuz?',
      ];

      const randomResponse =
        aiResponses[Math.floor(Math.random() * aiResponses.length)] ||
        'Merhaba! Size nasÄ±l yardÄ±mcÄ± olabilirim?';

      const aiMessage: Message = {
        id: (Date.now() + 2).toString(),
        text: randomResponse,
        isUser: false,
        timestamp: new Date(),
      };

      setMessages((prev) => prev.filter((msg) => !msg.isLoading).concat(aiMessage));
    } catch (error) {
      console.error('Error getting AI response:', error);
      Alert.alert('Hata', 'AI yanÄ±tÄ± alÄ±nÄ±rken bir hata oluÅŸtu. LÃ¼tfen tekrar deneyin.');

      // Remove loading message
      setMessages((prev) => prev.filter((msg) => !msg.isLoading));
    } finally {
      setIsLoading(false);
    }
  };

  const handleSendMessage = async () => {
    if (!inputText.trim() || isLoading) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputText.trim(),
      isUser: true,
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, userMessage]);
    setInputText('');
    setIsLoading(true);

    // Add loading message
    const loadingMessage: Message = {
      id: (Date.now() + 1).toString(),
      text: 'AI dÃ¼ÅŸÃ¼nÃ¼yor...',
      isUser: false,
      timestamp: new Date(),
      isLoading: true,
    };

    setMessages((prev) => [...prev, loadingMessage]);

    try {
      // Simulate AI response (replace with actual API call)
      await new Promise((resolve) => setTimeout(resolve, 2000));

      const aiResponses = [
        'Bu ÅŸarkÄ± gerÃ§ekten harika! MÃ¼zik teorisi aÃ§Ä±sÄ±ndan bakarsak, bu parÃ§a Ã§ok gÃ¼zel bir melodi yapÄ±sÄ±na sahip.',
        'Bu sanatÃ§Ä±nÄ±n diÄŸer eserlerini de dinlemenizi Ã¶neririm. Benzer tarzda baÅŸka Ã¶nerilerim de var.',
        'MÃ¼zik tarihinde bu tÃ¼r eserlerin Ã¶nemli bir yeri var. Hangi dÃ¶nem hakkÄ±nda daha fazla bilgi almak istersiniz?',
        'Bu ÅŸarkÄ±nÄ±n sÃ¶zleri gerÃ§ekten derin anlamlar taÅŸÄ±yor. SanatÃ§Ä±nÄ±n hayatÄ±ndan izler bulabilirsiniz.',
        'MÃ¼zik prodÃ¼ksiyonu aÃ§Ä±sÄ±ndan bu parÃ§a Ã§ok baÅŸarÄ±lÄ±. Hangi teknik detaylar hakkÄ±nda konuÅŸmak istersiniz?',
        'Bu tÃ¼r mÃ¼zik dinlemek ruh halinizi nasÄ±l etkiliyor? MÃ¼ziÄŸin psikolojik etkileri hakkÄ±nda konuÅŸabiliriz.',
        'Bu sanatÃ§Ä±nÄ±n kariyer yolculuÄŸu gerÃ§ekten ilham verici. BaÅŸka hangi sanatÃ§Ä±larÄ± takip ediyorsunuz?',
        'MÃ¼zik tÃ¼rleri arasÄ±nda geÃ§iÅŸ yapmak her zaman ilginÃ§. Hangi tÃ¼rleri keÅŸfetmek istiyorsunuz?',
      ];

      const randomResponse =
        aiResponses[Math.floor(Math.random() * aiResponses.length)] ||
        'Merhaba! Size nasÄ±l yardÄ±mcÄ± olabilirim?';

      const aiMessage: Message = {
        id: (Date.now() + 2).toString(),
        text: randomResponse,
        isUser: false,
        timestamp: new Date(),
      };

      setMessages((prev) => prev.filter((msg) => !msg.isLoading).concat(aiMessage));
    } catch (error) {
      console.error('Error getting AI response:', error);
      Alert.alert('Hata', 'AI yanÄ±tÄ± alÄ±nÄ±rken bir hata oluÅŸtu. LÃ¼tfen tekrar deneyin.');

      // Remove loading message
      setMessages((prev) => prev.filter((msg) => !msg.isLoading));
    } finally {
      setIsLoading(false);
    }
  };

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString('tr-TR', {
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  const handlePlayAction = async () => {
    setIsModalVisible(false);

    try {
      const spotifyApi = SpotifyApiService.getInstance();

      // Check if we have a trackId
      if (!params?.trackId) {
        Alert.alert('Hata', 'ÅžarkÄ± bilgisi bulunamadÄ±.');
        return;
      }

      // Get track details first
      const trackDetails: SpotifyTrack = await spotifyApi.getTrack(params.trackId);

      // Start playback with the track
      await spotifyApi.startPlayback(params.trackId);

      Alert.alert(
        'ðŸŽµ Ã‡alÄ±nÄ±yor',
        `${trackDetails.name} - ${trackDetails.artists.map((artist) => artist.name).join(', ')}`
      );
    } catch (error) {
      console.error('Error playing track:', error);
      Alert.alert(
        'Hata',
        'ÅžarkÄ± Ã§alÄ±nÄ±rken bir hata oluÅŸtu. Spotify Premium hesabÄ±nÄ±zÄ±n aktif olduÄŸundan emin olun.'
      );
    }
  };

  const handleComingSoonAction = () => {
    setIsModalVisible(false);
    Alert.alert('ðŸš§ YakÄ±nda', 'Bu Ã¶zellik yakÄ±nda gelecek!');
  };

  const renderMessage = (message: Message) => (
    <View
      key={message.id}
      style={[
        styles.messageContainer,
        message.isUser ? styles.userMessageContainer : styles.aiMessageContainer,
      ]}
    >
      <View
        style={[
          styles.messageBubble,
          message.isUser ? styles.userMessageBubble : styles.aiMessageBubble,
          message.isLoading && styles.loadingMessageBubble,
        ]}
      >
        <Text
          style={[
            styles.messageText,
            message.isUser ? styles.userMessageText : styles.aiMessageText,
            message.isLoading && styles.loadingMessageText,
          ]}
        >
          {message.text}
        </Text>
        {message.isLoading && (
          <View style={styles.loadingDots}>
            <View style={styles.dot} />
            <View style={styles.dot} />
            <View style={styles.dot} />
          </View>
        )}
      </View>
      <Text style={styles.messageTime}>{formatTime(message.timestamp)}</Text>
    </View>
  );

  const renderQuickActions = () => (
    <View style={styles.quickActionsContainer}>
      <Text style={styles.quickActionsTitle}>HÄ±zlÄ± SeÃ§enekler</Text>
      <TouchableOpacity
        style={styles.quickActionButton}
        onPress={() => handleQuickAction('ÅžarkÄ± sÃ¶zleri')}
        disabled={isLoading}
      >
        <Feather name="music" size={20} color="#fff" />
        <Text style={styles.quickActionText}>ÅžarkÄ± sÃ¶zleri</Text>
        <Text style={styles.quickActionSubtext}>
          ÅžarkÄ± sÃ¶zlerini ve anlamlarÄ±nÄ± merak mÄ± ediyorsunuz?
        </Text>
      </TouchableOpacity>

      <TouchableOpacity
        style={styles.quickActionButton}
        onPress={() => handleQuickAction('Hikayesi')}
        disabled={isLoading}
      >
        <Feather name="book-open" size={20} color="#fff" />
        <Text style={styles.quickActionText}>Hikayesi</Text>
        <Text style={styles.quickActionSubtext}>Bu ÅŸarkÄ±yÄ± kim nasÄ±l oluÅŸturdu sizce?</Text>
      </TouchableOpacity>

      <TouchableOpacity
        style={styles.quickActionButton}
        onPress={() => handleQuickAction('Rastgele')}
        disabled={isLoading}
      >
        <Feather name="shuffle" size={20} color="#fff" />
        <Text style={styles.quickActionText}>Rastgele</Text>
        <Text style={styles.quickActionSubtext}>Bu ÅŸarkÄ±nÄ±n tarzÄ± ne?</Text>
      </TouchableOpacity>
    </View>
  );

  return (
    <KeyboardAvoidingView
      style={styles.container}
      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
      keyboardVerticalOffset={Platform.OS === 'ios' ? 90 : 0}
    >
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity style={styles.backButton} onPress={() => router.goBack()}>
          <Feather name="arrow-left" size={24} color="#fff" />
        </TouchableOpacity>
        <View style={styles.headerInfo}>
          <Text style={styles.headerTitle}>AI MÃ¼zik AsistanÄ±</Text>
          {trackName && (
            <Text style={styles.headerSubtitle}>
              {trackName}
              {artistName && ` â€¢ ${artistName}`}
            </Text>
          )}
        </View>
        <TouchableOpacity style={styles.moreButton} onPress={() => setIsModalVisible(true)}>
          <Feather name="more-vertical" size={24} color="#fff" />
        </TouchableOpacity>
      </View>

      {/* Messages */}
      <ScrollView
        ref={scrollViewRef}
        style={styles.messagesContainer}
        contentContainerStyle={styles.messagesContent}
        showsVerticalScrollIndicator={false}
      >
        {messages.map(renderMessage)}

        {/* Quick Actions - only show if no user messages */}
        {!hasUserMessages && !isLoading && renderQuickActions()}
      </ScrollView>

      {/* Input Area - only show if there are user messages */}
      {hasUserMessages && (
        <View style={styles.inputContainer}>
          <View style={styles.inputWrapper}>
            <TextInput
              style={styles.textInput}
              placeholder="MÃ¼zik hakkÄ±nda bir ÅŸeyler yazÄ±n..."
              placeholderTextColor="rgba(255,255,255,0.5)"
              value={inputText}
              onChangeText={setInputText}
              multiline
              maxLength={500}
              onSubmitEditing={handleSendMessage}
              returnKeyType="send"
            />
            <TouchableOpacity
              style={[
                styles.sendButton,
                (!inputText.trim() || isLoading) && styles.sendButtonDisabled,
              ]}
              onPress={handleSendMessage}
              disabled={!inputText.trim() || isLoading}
            >
              <Feather
                name="send"
                size={20}
                color={!inputText.trim() || isLoading ? 'rgba(255,255,255,0.3)' : '#fff'}
              />
            </TouchableOpacity>
          </View>
        </View>
      )}

      {/* Action Modal */}
      <Modal
        visible={isModalVisible}
        transparent
        animationType="fade"
        onRequestClose={() => setIsModalVisible(false)}
      >
        <TouchableOpacity
          style={styles.modalOverlay}
          activeOpacity={1}
          onPress={() => setIsModalVisible(false)}
        >
          <View style={styles.modalContent}>
            <TouchableOpacity style={styles.modalButton} onPress={handlePlayAction}>
              <Feather name="play" size={20} color="#fff" />
              <Text style={styles.modalButtonText}>Ã‡al</Text>
            </TouchableOpacity>

            <View style={styles.modalDivider} />

            <TouchableOpacity style={styles.modalButton} onPress={handleComingSoonAction}>
              <Feather name="clock" size={20} color="#fff" />
              <Text style={styles.modalButtonText}>YakÄ±nda</Text>
            </TouchableOpacity>
          </View>
        </TouchableOpacity>
      </Modal>
    </KeyboardAvoidingView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: 'rgba(92, 50, 129, 0.95)',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingTop: 60,
    paddingBottom: 16,
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(255,255,255,0.1)',
  },
  backButton: {
    padding: 8,
    marginRight: 12,
  },
  headerInfo: {
    flex: 1,
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#fff',
    marginBottom: 2,
  },
  headerSubtitle: {
    fontSize: 14,
    color: '#fff',
    opacity: 0.7,
  },
  moreButton: {
    padding: 8,
  },
  messagesContainer: {
    flex: 1,
  },
  messagesContent: {
    paddingHorizontal: 16,
    paddingVertical: 16,
  },
  messageContainer: {
    marginBottom: 16,
  },
  userMessageContainer: {
    alignItems: 'flex-end',
  },
  aiMessageContainer: {
    alignItems: 'flex-start',
  },
  messageBubble: {
    maxWidth: '80%',
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderRadius: 20,
    marginBottom: 4,
  },
  userMessageBubble: {
    backgroundColor: '#1DB954',
    borderBottomRightRadius: 4,
  },
  aiMessageBubble: {
    backgroundColor: 'rgba(255,255,255,0.15)',
    borderBottomLeftRadius: 4,
  },
  loadingMessageBubble: {
    backgroundColor: 'rgba(255,255,255,0.1)',
  },
  messageText: {
    fontSize: 16,
    lineHeight: 22,
  },
  userMessageText: {
    color: '#fff',
    fontWeight: '500',
  },
  aiMessageText: {
    color: '#fff',
  },
  loadingMessageText: {
    color: 'rgba(255,255,255,0.7)',
    fontStyle: 'italic',
  },
  messageTime: {
    fontSize: 12,
    color: 'rgba(255,255,255,0.5)',
    marginTop: 4,
  },
  loadingDots: {
    flexDirection: 'row',
    justifyContent: 'center',
    marginTop: 8,
  },
  dot: {
    width: 6,
    height: 6,
    borderRadius: 3,
    backgroundColor: 'rgba(255,255,255,0.5)',
    marginHorizontal: 2,
  },
  quickActionsContainer: {
    marginTop: 20,
    paddingHorizontal: 16,
  },
  quickActionsTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#fff',
    marginBottom: 16,
    textAlign: 'center',
  },
  quickActionButton: {
    backgroundColor: 'rgba(255,255,255,0.1)',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    flexDirection: 'row',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: 'rgba(255,255,255,0.2)',
  },
  quickActionText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#fff',
    marginLeft: 12,
    flex: 1,
  },
  quickActionSubtext: {
    fontSize: 14,
    color: 'rgba(255,255,255,0.7)',
    marginLeft: 12,
    flex: 2,
  },
  inputContainer: {
    paddingHorizontal: 16,
    paddingVertical: 16,
    borderTopWidth: 1,
    borderTopColor: 'rgba(255,255,255,0.1)',
  },
  inputWrapper: {
    flexDirection: 'row',
    alignItems: 'flex-end',
    backgroundColor: 'rgba(255,255,255,0.1)',
    borderRadius: 24,
    paddingHorizontal: 16,
    paddingVertical: 8,
  },
  textInput: {
    flex: 1,
    fontSize: 16,
    color: '#fff',
    maxHeight: 100,
    paddingVertical: 8,
  },
  sendButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#1DB954',
    justifyContent: 'center',
    alignItems: 'center',
    marginLeft: 8,
  },
  sendButtonDisabled: {
    backgroundColor: 'rgba(29, 185, 84, 0.3)',
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0,0,0,0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContent: {
    backgroundColor: '#282828',
    borderRadius: 10,
    padding: 20,
    width: '80%',
    alignItems: 'center',
  },
  modalButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 8,
    marginBottom: 10,
  },
  modalButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '500',
    marginLeft: 10,
  },
  modalDivider: {
    height: 1,
    backgroundColor: 'rgba(255,255,255,0.1)',
    width: '100%',
    marginVertical: 15,
  },
});
